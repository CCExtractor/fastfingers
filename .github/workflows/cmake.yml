name: CMake

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest
    outputs:
      branch: v0.7.2
      tag: v0.7.2

    steps:
    - uses: actions/checkout@v2

    - name: Install Dependencies
      run: sudo apt-get install pkg-config libgtk-3-dev
      
    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -S ${{github.workspace}}/src -B ${{github.workspace}}/src/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/src/build --config ${{env.BUILD_TYPE}} -v
    
    - name: Install
      # Install the app system wide
      run: sudo make --directory ${{github.workspace}}/src/build install
      
    - name: Create Package
      # Create debian package
      run: sudo ${{github.workspace}}/package_creators/debian.sh ${{github.workspace}}
          
    - name: Push the debian package
      uses: s0/git-publish-subdir-action@v2.5.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        REPO: self
        BRANCH: v0.7.2
        FOLDER: ${{github.workspace}}/packages
        SKIP_EMPTY_COMMITS: true

  tag_version:
    needs: build
    runs-on: ubuntu-latest
    outputs:
      tagged: ${{ steps.check_tagged.outputs.tagged }}
      tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - name: Checkout dist branch
        uses: actions/checkout@v2
        with:
          ref: ${{ needs.build.outputs.branch }}
          fetch-depth: 0

      - name: Check tag exists
        id: check_tag
        uses: mukunku/tag-exists-action@v1.0.0
        with:
          tag: ${{ needs.build.outputs.tag }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Tag version
        id: tag
        if: ${{ steps.check_tag.outputs.exists == 'false' }}
        uses: anothrNick/github-tag-action@1.34.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CUSTOM_TAG: ${{ needs.build.outputs.tag }}

      - name: Check created tag
        id: check_tagged
        run: |
          echo "::set-output name=tagged::${{ (steps.check_tag.outputs.exists == 'false') && (steps.tag.outputs.new_tag == steps.tag.outputs.tag) }}"

  create_release:
    needs: tag_version
    if: ${{ needs.tag_version.outputs.tagged == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ needs.tag_version.outputs.tag }}
          draft: true
